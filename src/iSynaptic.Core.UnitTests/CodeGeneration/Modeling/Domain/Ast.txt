ast iSynaptic.CodeGeneration.Modeling.Domain
{
    contract INode(INode) { }

    contract IAnnotatableNode(INode) 
    {
        AnnotationSyntax* Annotations;
    }

    contract INamespaceParent : INode { }
    contract INamespaceMember : INode { }
    
    contract IUsingsContainer
    {
        UsingStatementSyntax* UsingStatements;
    }

    contract ISymbol : INode
    {
        NameSyntax Name;
        NameSyntax FullName;
    }

    contract IType : ISymbol 
    {
        SimpleNameSyntax SimpleName;
        Boolean IsValueType;
        Boolean HasValueSemantics;
    }

    contract ITypeWithBase : IType
    {
        NameSyntax? Base;
    }

    contract IAggregateMember : INode { }

    node AnnotationSyntax("Annotation", INode) : INode
    {
        IdentifierNameSyntax Name;
        AnnotationPairSyntax* Pairs;
    }

    node AnnotationPairSyntax("AnnotationPair", AnnotationSyntax) : INode
    {
        IdentifierNameSyntax Name;
        String Value;
    }

    node Compilation("Compilation") : INode
    {
        SyntaxTree* Trees;
    }

    node SyntaxTree("SyntaxTree", Compilation) : INamespaceParent, IUsingsContainer
    {
        UsingStatementSyntax* UsingStatements;
        NamespaceSyntax* Namespaces;
    }

    partial node NamespaceSyntax("Namespace", INamespaceParent) : INamespaceParent, INamespaceMember, IUsingsContainer, ISymbol
    {
        NameSyntax Name;

        UsingStatementSyntax* UsingStatements;
        INamespaceMember* Members;
    }

    abstract node AggregateIdentifierSyntax("AggregateIdentifier", AggregateSyntax) { }
    node NamedAggregateIdentifierSyntax("NamedAggregateIdentifier") : AggregateIdentifierSyntax
    {
        TypeReferenceSyntax Type;
    }

    node GenericAggregateIdentifierSyntax("GenericAggregateIdentifier") : AggregateIdentifierSyntax
    {
        IdentifierNameSyntax Name;
        TypeReferenceSyntax? ConstrainedType;
    }

    partial node EnumSyntax("Enum", NamespaceSyntax) : INamespaceMember, IType, IAnnotatableNode
    {
        SimpleNameSyntax SimpleName;
        EnumValueSyntax* Values;

        AnnotationSyntax* Annotations;
    }

    node EnumValueSyntax("EnumValue", EnumSyntax)
    {
        IdentifierNameSyntax SimpleName;
    }

    abstract partial node MoleculeSyntax("Molecule", ISymbol) : ITypeWithBase, IAnnotatableNode
    {
        Boolean IsAbstract;
        Boolean IsPartial;
        SimpleNameSyntax SimpleName;
        NameSyntax? Base;

        AtomSyntax* Atoms;
        AnnotationSyntax* Annotations;
    }

    partial node AtomSyntax("Atom", MoleculeSyntax) : ISymbol, IAnnotatableNode
    {
        SimpleNameSyntax SimpleName;
        TypeReferenceSyntax Type;

        AnnotationSyntax* Annotations;
    }

    partial node AggregateSyntax("Aggregate", NamespaceSyntax) : INamespaceMember, ITypeWithBase, IAnnotatableNode
    {
        Boolean IsAbstract;
        SimpleNameSyntax SimpleName;
        AggregateIdentifierSyntax? Identifier;
        NameSyntax? Base;

        IAggregateMember* Members;
        AnnotationSyntax* Annotations;
    }

    partial node AggregateEventSyntax("AggregateEvent", AggregateSyntax) : MoleculeSyntax, IAggregateMember
    {
    }

    partial node AggregateSnapshotSyntax("AggregateSnapshot", AggregateSyntax) : MoleculeSyntax, IAggregateMember
    {
    }

    partial node AggregateEventPropertySyntax("AggregateEventProperty", AggregateEventSyntax) : ISymbol, IAnnotatableNode
    {
        SimpleNameSyntax SimpleName;
        TypeReferenceSyntax Type;

        AnnotationSyntax* Annotations;
    }

    partial node ScalarValueSyntax("ScalarValue", NamespaceSyntax) : INamespaceMember, ITypeWithBase, IAnnotatableNode
    {
        Boolean IsAbstract;
        Boolean IsPartial;
        SimpleNameSyntax SimpleName;
        NameSyntax Base;

        AnnotationSyntax* Annotations;
    }

    partial node ValueSyntax("Value", NamespaceSyntax) : MoleculeSyntax, INamespaceMember
    {
    }

    node UsingStatementSyntax("UsingStatement")
    {
        NameSyntax Namespace;
    }

    abstract partial node NameSyntax("Name")
    {
    }

    abstract partial node SimpleNameSyntax("SimpleName") : NameSyntax
    {
        String Identifier;
    }

    partial node IdentifierNameSyntax("IdentifierName") : SimpleNameSyntax { }

    partial node GenericNameSyntax("GenericName") : SimpleNameSyntax
    {
        NameSyntax* TypeArguments;
    }

    partial node QualifiedNameSyntax("QualifiedName") : NameSyntax
    {
        NameSyntax Left;
        SimpleNameSyntax Right ;
    }
}
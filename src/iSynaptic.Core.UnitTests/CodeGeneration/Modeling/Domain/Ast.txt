ast iSynaptic.CodeGeneration.Modeling.Domain
{
    contract INode(INode) { }

    contract INamespaceParent : INode { }
    contract INamespaceMember : INode { }
    
    contract IUsingsContainer
    {
        UsingStatementSyntax* UsingStatements;
    }

    contract ISymbol : INode
    {
        NameSyntax Name;
        NameSyntax FullName;
    }

    contract IType : ISymbol 
    {
        SimpleNameSyntax SimpleName;
        Boolean IsValueType;
    }

    node SyntaxTree("SyntaxTree") : INamespaceParent, IUsingsContainer, INode
    {
        UsingStatementSyntax* UsingStatements;
        NamespaceSyntax* Namespaces;
    }

    node NamespaceSyntax("Namespace", INamespaceParent) : INamespaceParent, INamespaceMember, IUsingsContainer, ISymbol
    {
        NameSyntax Name;

        UsingStatementSyntax* UsingStatements;
        INamespaceMember* Members;
    }

    abstract node AggregateIdentifierSyntax("AggregateIdentifier", AggregateSyntax) { }
    node NamedAggregateIdentifierSyntax("NamedAggregateIdentifier") : AggregateIdentifierSyntax
    {
        TypeReferenceSyntax Type;
    }

    node GenericAggregateIdentifierSyntax("GenericAggregateIdentifier") : AggregateIdentifierSyntax
    {
        IdentifierNameSyntax Name;
        TypeReferenceSyntax? ConstrainedType;
    }

    abstract node MoleculeSyntax("Molecule", ISymbol) : IType
    {
        Boolean IsAbstract;
        SimpleNameSyntax SimpleName;
        NameSyntax? Base;

        AtomSyntax* Atoms;
    }

    node AtomSyntax("Atom", MoleculeSyntax)
    {
        SimpleNameSyntax SimpleName;
        TypeReferenceSyntax Type;
    }

    node AggregateSyntax("Aggregate", NamespaceSyntax) : INamespaceMember, IType
    {
        SimpleNameSyntax SimpleName;
        AggregateIdentifierSyntax? Identifier;
        NameSyntax? Base;

        AggregateEventSyntax* Events;
    }

    node AggregateEventSyntax("AggregateEvent", AggregateSyntax) : MoleculeSyntax
    {
    }

    node AggregateEventPropertySyntax("AggregateEventProperty", AggregateEventSyntax) : ISymbol
    {
        SimpleNameSyntax SimpleName;
        TypeReferenceSyntax Type;
    }

    node ValueSyntax("Value", NamespaceSyntax) : MoleculeSyntax, INamespaceMember
    {
    }

    node UsingStatementSyntax("UsingStatement")
    {
        NameSyntax Namespace;
    }

    abstract node NameSyntax("Name")
    {
    }

    abstract node SimpleNameSyntax("SimpleName") : NameSyntax
    {
        String Identifier;
    }

    node IdentifierNameSyntax("IdentifierName") : SimpleNameSyntax { }

    node GenericNameSyntax("GenericName") : SimpleNameSyntax
    {
        NameSyntax* TypeArguments;
    }

    node QualifiedNameSyntax("QualifiedName") : NameSyntax
    {
        NameSyntax Left;
        SimpleNameSyntax Right ;
    }
}
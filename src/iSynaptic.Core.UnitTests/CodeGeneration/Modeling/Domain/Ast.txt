ast iSynaptic.CodeGeneration.Modeling.Domain
{
    contract INamespaceParent { }
    contract INamespaceMember { }
	
	contract IUsingsContainer
	{
		UsingStatementSyntax* UsingStatements;
	}

	contract ISymbol
	{
		NameSyntax FullName;
	}

	contract IType : ISymbol 
	{
		SimpleNameSyntax Name;
	}

    node SyntaxTree("SyntaxTree") : INamespaceParent, IUsingsContainer
    {
        UsingStatementSyntax* UsingStatements;
        NamespaceSyntax* Namespaces;
    }

    node NamespaceSyntax("Namespace", INamespaceParent) : INamespaceParent, INamespaceMember, IUsingsContainer, ISymbol
    {
        NameSyntax Name;

        UsingStatementSyntax* UsingStatements;
        INamespaceMember* Members;
    }

    node AggregateSyntax("Aggregate", NamespaceSyntax) : INamespaceMember, IType
    {
        SimpleNameSyntax Name;
		NameSyntax? IdentifierType;
		NameSyntax? BaseAggregate;

        AggregateEventSyntax* Events;
    }

    node AggregateEventSyntax("AggregateEvent", AggregateSyntax) : ISymbol
    {
        SimpleNameSyntax Name;
        AggregateEventPropertySyntax* Properties;
    }

    node AggregateEventPropertySyntax("AggregateEventProperty", AggregateEventSyntax) : ISymbol
    {
        SimpleNameSyntax Name;
        SimpleNameSyntax Type;
    }

    node ValueSyntax("Value", NamespaceSyntax) : INamespaceMember, IType
    {
        SimpleNameSyntax Name;
        ValuePropertySyntax* Properties;
    }

    node ValuePropertySyntax("ValueProperty", ValueSyntax) : ISymbol
    {
        SimpleNameSyntax Name;
        SimpleNameSyntax Type;
    }

    node UsingStatementSyntax("UsingStatement")
    {
        NameSyntax Namespace;
    }

    abstract node NameSyntax("Name")
    {
    }

    abstract node SimpleNameSyntax("SimpleName") : NameSyntax
    {
        String Identifier;
    }

    node IdentifierNameSyntax("IdentifierName") : SimpleNameSyntax { }

    node GenericNameSyntax("GenericName") : SimpleNameSyntax
    {
        NameSyntax* TypeArguments;
    }

    node QualifiedNameSyntax("QualifiedName") : NameSyntax
    {
        NameSyntax Left;
        SimpleNameSyntax Right ;
    }
}
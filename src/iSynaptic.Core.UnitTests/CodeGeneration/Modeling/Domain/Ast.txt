ast iSynaptic.CodeGeneration.Modeling.Domain
{
    contract INamespaceParent { }
    contract INamespaceMember(INamespaceParent) { }

    node SyntaxTree("SyntaxTree") : INamespaceParent
    {
        UsingStatementSyntax* UsingStatements;
        NamespaceSyntax* Namespaces;
    }

    node NamespaceSyntax("Namespace", INamespaceParent) : INamespaceParent, INamespaceMember
    {
        String Name;

        UsingStatementSyntax* UsingStatements;
        INamespaceMember* Members;
    }

    node AggregateSyntax("Aggregate", NamespaceSyntax)
    {
        String Name;
        AggregateEventSyntax* Events;
    }

    node AggregateEventSyntax("AggregateEvent", AggregateSyntax)
    {
        String Name;
        AggregateEventPropertySyntax* Properties;
    }

    node AggregateEventPropertySyntax("AggregateEventProperty", AggregateEventSyntax)
    {
        String Name;
        String Type;
    }

    node ValueSyntax("Value", NamespaceSyntax)
    {
        String Name;
        ValuePropertySyntax* Properties;
    }

    node ValuePropertySyntax("ValueProperty", ValueSyntax)
    {
        String Name;
        String Type;
    }

    node UsingStatementSyntax("UsingStatement", NamespaceSyntax)
    {
        String Namespace;
    }

    abstract node NameSyntax("Name")
    {
    }

    abstract node SimpleNameSyntax("SimpleName") : NameSyntax
    {
        String Identifier;
    }

    node IdentifierNameSyntax("IdentifierName") : SimpleNameSyntax { }

    node GenericNameSyntax("GenericName") : SimpleNameSyntax
    {
        NameSyntax* TypeArguments;
    }

    node QualifiedNameSyntax("QualifiedName") : NameSyntax
    {
        NameSyntax Left;
        SimpleNameSyntax Right ;
    }
}